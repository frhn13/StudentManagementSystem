@page "/SignUp"

@inject NavigationManager NavigationManager
@inject LoginClient LoginClient

@rendermode InteractiveServer

<div class="mb-10">
    <PageTitle>Sign Up</PageTitle>
    <h2>Sign Up Page</h2>
</div>

@if (signUpDetails is null)
{
    <p>Currently Loading...</p>
}
else if (!LoginClient.GetLoggedInDetails().Username.Equals(string.Empty))
{
    <p>Page inaccessible</p>
}
else
{
    <div class="row">
        <div class="flex-center">
            <EditForm Model="@signUpDetails" FormName="SignUp" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="signUpDetails.Name" />
                    <ValidationMessage For="() => signUpDetails.Name" />
                </div>
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="signUpDetails.Username" />
                    <ValidationMessage For="() => signUpDetails.Username" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" type="Password" class="form-control" @bind-Value="signUpDetails.Password" />
                    <ValidationMessage For="() => signUpDetails.Password" />
                </div>
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm Password</label>
                    <InputText id="confirmPassword" type="Password" class="form-control" @bind-Value="signUpDetails.ConfirmPassword" />
                    <ValidationMessage For="() => signUpDetails.ConfirmPassword" />
                </div>
                <button type="submit" class="btn btn-primary">Create Account</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [SupplyParameterFromForm]
    private SignUpDetails? signUpDetails { get; set; }
    private LoginDetails? loginDetails { get; set; }
    protected override void OnParametersSet()
    {
        signUpDetails = new()
            {
                Name = String.Empty,
                Username = String.Empty,
                Password = String.Empty,
                ConfirmPassword = String.Empty
            };
    }
    private async void HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(signUpDetails);
        loginDetails = new()
            {
                Name = signUpDetails.Name,
                Username = signUpDetails.Username,
                Password = signUpDetails.Password,
                Role = "user"
            };
        await LoginClient.CreateAccountAsync(loginDetails);
        NavigationManager.NavigateTo("/Login");
    }
}
