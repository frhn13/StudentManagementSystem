@page "/AddStudent"
@page "/EditStudent/{Id:int}"

@inject NavigationManager NavigationManager
@inject LoginClient LoginClient

@rendermode InteractiveServer

<div class="mb-10">
    <PageTitle>@title</PageTitle>
    <h2>@heading</h2>
</div>

@if (studentDetails is null)
{
    <p>Currently Loading...</p>
}
else if (LoginClient.GetLoggedInUser().Username.Equals(string.Empty) || LoginClient.GetLoggedInUser().Role!.Equals("user"))
{
    <p>Page inaccessible</p>
}
else
{
    <div class="row">
        <div class="flex-center">
            <EditForm Model="@studentDetails" FormName="AddStudent" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="studentDetails.Name" />
                    <ValidationMessage For="() => studentDetails.Name" />
                </div>
                <div class="mb-3">
                    <label for="age" class="form-label">Age</label>
                    <InputNumber id="age" class="form-control" @bind-Value="studentDetails.Age" />
                    <ValidationMessage For="() => studentDetails.Age" />
                </div>
                <div class="mb-3 form-check">
                    <label for="year" class="form-label">Year Group</label>
                    <InputNumber id="year" class="form-control" @bind-Value="studentDetails.Year" />
                    <ValidationMessage For="() => studentDetails.Year" />
                </div>
                <div class="mb-3">
                    <label for="mobileNumber" class="form-label">Mobile Number</label>
                    <InputText id="mobileNumber" class="form-control" @bind-Value="studentDetails.MobileNumber" />
                    <ValidationMessage For="() => studentDetails.MobileNumber" />
                </div>
                <div class="mb-3">
                    <label for="dob" class="form-label">Date of Birth</label>
                    <InputDate id="dob" class="form-control" @bind-Value="studentDetails.DOB" />
                    <ValidationMessage For="() => studentDetails.DOB" />
                </div>
                <button type="submit" class="btn btn-primary">Save Student</button>
                <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    [SupplyParameterFromForm]
    private StudentDetails? studentDetails { get; set; }
    private string title = string.Empty;
    private string heading = string.Empty;

    protected override void OnParametersSet()
    {
        if (Id is null)
        {
            studentDetails = new()
                {
                    Name = String.Empty,
                    MobileNumber = String.Empty,
                    DOB = DateOnly.FromDateTime(DateTime.UtcNow)
                };
            title = "Add Student";
            heading = "Add a Student";
        }
        else if (Id is not null)
        {
            studentDetails = StudentManagement.GetStudent(Id.Value); // Gets value of Id if it is not null
            title = $"Edit {studentDetails.Name}";
            heading = $"Edit {studentDetails.Name}'s Details";
        }
    }
    private void HandleSubmit()
    {
        ArgumentNullException.ThrowIfNull(studentDetails);
        if (Id is null)
        {
            StudentManagement.AddNewStudent(studentDetails);
        }
        else
        {
            StudentManagement.EditStudent(studentDetails);
        }
        NavigationManager.NavigateTo("/");
    }
}
